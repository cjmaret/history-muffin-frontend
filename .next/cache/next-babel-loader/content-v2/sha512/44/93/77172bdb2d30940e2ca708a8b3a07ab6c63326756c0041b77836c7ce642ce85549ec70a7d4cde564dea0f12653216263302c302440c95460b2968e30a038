{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colinmaretsky/dev/wes-bos/e-commerce-site/frontend/components/Checkout.js\";\nimport styled from 'styled-components';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useRouter } from 'next/dist/client/router';\nimport SickButton from './styles/SickButton';\nimport { useCart } from '../lib/cartState';\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nexport const CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const router = useRouter();\n  const {\n    closeCart\n  } = useCart();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setLoading(true); // 2. start the page transition\n\n    nProgress.start(); // 3. create the payment method via stripe (Token comes back here if successful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. handle any errors from stripe\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // stops the checkout from happening\n    } // 5. send the token from step 4 to our keystone server, via a custom mutation\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log('finished order!');\n    console.log(order); // 6. change the page to view the order\n\n    router.push({\n      pathname: `/order/[id]`,\n      query: {\n        id: order.data.checkout.id\n      }\n    }); // 7. close the cart\n\n    closeCart(); // 8. turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check Out Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\nexport { Checkout };","map":{"version":3,"sources":["/Users/colinmaretsky/dev/wes-bos/e-commerce-site/frontend/components/Checkout.js"],"names":["styled","loadStripe","CardElement","Elements","useElements","useStripe","useState","nProgress","useMutation","gql","useRouter","SickButton","useCart","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","router","closeCart","checkout","graphQLError","handleSubmit","e","preventDefault","start","paymentMethod","createPaymentMethod","type","card","getElement","console","log","done","order","variables","token","id","push","pathname","query","data","message","Checkout"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\nimport { loadStripe } from '@stripe/stripe-js';\nimport {\n  CardElement,\n  Elements,\n  useElements,\n  useStripe,\n} from '@stripe/react-stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useRouter } from 'next/dist/client/router';\nimport SickButton from './styles/SickButton';\nimport { useCart } from '../lib/cartState';\n\nconst CheckoutFormStyles = styled.form`\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n`;\n\nexport const CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    checkout(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const router = useRouter();\n  const { closeCart } = useCart();\n  const [checkout, { error: graphQLError }] = useMutation(\n    CREATE_ORDER_MUTATION\n  );\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setLoading(true);\n\n    // 2. start the page transition\n    nProgress.start();\n\n    // 3. create the payment method via stripe (Token comes back here if successful)\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n    });\n\n    console.log(paymentMethod);\n\n    // 4. handle any errors from stripe\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // stops the checkout from happening\n    }\n\n    // 5. send the token from step 4 to our keystone server, via a custom mutation\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id,\n      },\n    });\n\n    console.log('finished order!');\n    console.log(order);\n\n    // 6. change the page to view the order\n\n    router.push({\n      pathname: `/order/[id]`,\n      query: {\n        id: order.data.checkout.id,\n      },\n    });\n\n    // 7. close the cart\n\n    closeCart();\n\n    // 8. turn the loader off\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return (\n    <CheckoutFormStyles onSubmit={handleSubmit}>\n      {error && <p>{error.message}</p>}\n      {graphQLError && <p>{graphQLError.message}</p>}\n      <CardElement />\n      <SickButton>Check Out Now</SickButton>\n    </CheckoutFormStyles>\n  );\n}\n\nfunction Checkout() {\n  return (\n    <Elements stripe={stripeLib}>\n      <CheckoutForm />\n    </Elements>\n  );\n}\n\nexport { Checkout };\n"]},"metadata":{},"sourceType":"module"}