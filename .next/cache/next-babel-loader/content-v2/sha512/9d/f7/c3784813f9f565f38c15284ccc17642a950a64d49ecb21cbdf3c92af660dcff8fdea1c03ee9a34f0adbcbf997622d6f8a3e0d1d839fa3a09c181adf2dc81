{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nexport default function useForm(initialState = {}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initialState);\n  const initialValues = Object.values(initialState).join('');\n  useEffect(() => {\n    setInputs(initialState);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let {\n      name,\n      type,\n      value\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initialState);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Users/colinmaretsky/dev/wes-bos/e-commerce-site/frontend/lib/useForm.js"],"names":["useEffect","useState","useForm","initialState","inputs","setInputs","initialValues","Object","values","join","handleChange","e","name","type","value","target","parseInt","files","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,CAAiBC,YAAY,GAAG,EAAhC,EAAoC;AACjD,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,YAAD,CAApC;AACA,QAAMG,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcL,YAAd,EAA4BM,IAA5B,CAAiC,EAAjC,CAAtB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,SAAS,CAACF,YAAD,CAAT;AACD,GAFQ,EAEN,CAACG,aAAD,CAFM,CAAT;;AAIA,WAASI,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAIF,IAAI,KAAK,QAAb,EAAuB;AACrBC,MAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,CAAhB;AACD;;AACD,QAAID,IAAI,KAAK,MAAb,EAAqB;AACnB,OAACC,KAAD,IAAUH,CAAC,CAACI,MAAF,CAASE,KAAnB;AACD;;AACDZ,IAAAA,SAAS,iCACJD,MADI;AAEP,OAACQ,IAAD,GAAQE;AAFD,OAAT;AAID;;AAED,WAASI,SAAT,GAAqB;AACnBb,IAAAA,SAAS,CAACF,YAAD,CAAT;AACD;;AAED,WAASgB,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGb,MAAM,CAACc,WAAP,CAAmBd,MAAM,CAACe,OAAP,CAAelB,MAAf,EAAuBmB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMV,KAAN,CAAD,KAAkB,CAACU,GAAD,EAAM,EAAN,CAA7C,CAAnB,CAAnB;AACAnB,IAAAA,SAAS,CAACe,UAAD,CAAT;AACD;;AAED,SAAO;AACLhB,IAAAA,MADK;AAELM,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport default function useForm(initialState = {}) {\n  const [inputs, setInputs] = useState(initialState);\n  const initialValues = Object.values(initialState).join('');\n\n  useEffect(() => {\n    setInputs(initialState);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let { name, type, value } = e.target;\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  function resetForm() {\n    setInputs(initialState);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}